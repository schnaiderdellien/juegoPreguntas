import streamlit as st
import random
import pandas as pd
import altair as alt

# ConfiguraciÃ³n de la pÃ¡gina
st.set_page_config(page_title="Juego de Preguntas", page_icon="ğŸ“±", layout="wide")

# Diccionarios de preguntas y retos
PREGUNTAS = {
  "nivel1": [
    "Â¿QuÃ© es lo que mÃ¡s miedo te da de la vida adulta?",
    "Â¿QuiÃ©n crees que es capaz de comer 1kg de pasta en una hora?",
    "Â¿QuÃ© es lo peor que te podrÃ­a pasar?",
    "Â¿QuÃ© prefieres: tener el don de entender a los animales o escuchar lo que piensan las personas a tu alrededor siempre?",
    "Â¿QuÃ© prefieres, volver al pasado o viajar al futuro?",
    "Â¿Roncas mientras duermes?",
    "Â¿CuÃ¡l es el sitio mÃ¡s raro en el que has hecho tus necesidades?",
    "Â¿QuÃ© prefieres, que nadie venga a tu boda o que nadie venga a tu funeral?",
    "Â¿QuÃ© prefieres, ser el primero de tus amigos en morir o ser el Ãºltimo?",
    "Â¿QuÃ© envidias de cada una de las personas presentes?",
    "Â¿Con quÃ© tÃ­tulo de pelÃ­cula definirÃ­as tu vida?",
    "Â¿QuÃ© es lo que mÃ¡s valoras?",
    "Â¿QuÃ© olor asqueroso te gusta en secreto?",
    "Â¿QuÃ© es lo mÃ¡s raro que sueles hacer cuando estÃ¡s solo?",
    "Â¿QuÃ© te diferencia del resto?",
    "Del 0 al 10, Â¿quÃ© nota te pondrÃ­as?",
    "Â¿CuÃ¡l es tu mayor inseguridad?",
    "Â¿QuÃ© es lo que mÃ¡s te hace enfadar?"
  ],
  "nivel2": [
    "Â¿QuiÃ©n es para ti la persona mÃ¡s sexy de la habitaciÃ³n?",
    "Â¿QuiÃ©n crees que liga mÃ¡s y por quÃ©?",
    "Â¿QuÃ© es lo peor que has hecho por amor?",
    "Tres defectos y tres virtudes tuyos.",
    "Â¿Con quiÃ©n del grupo te harÃ­as un tatuaje?",
    "Â¿Con quÃ© amistad te quedas de los aquÃ­ presentes?",
    "Â¿A quiÃ©n salvarÃ­as primero de este grupo?",
    "Â¿A quiÃ©n llamarÃ­as para enterrar un cadÃ¡ver?",
    "Â¿QuÃ© harÃ­as ahora mismo si supieras que no habrÃ­a consecuencias de ningÃºn tipo?",
    "Â¿QuiÃ©n crees que es la persona que peor viste del grupo?",
    "Â¿QuiÃ©n es mÃ¡s probable que acabe borracho hoy?",
    "Â¿CÃ³mo romperÃ­as con una pareja de la forma mÃ¡s dolorosa y desagradable posible para la otra persona?",
    "Si tuvieras que matar a alguien del grupo, Â¿a quiÃ©n matarÃ­as y a quiÃ©n pedirÃ­as que te ayude?",
    "Â¿Con quÃ© tres personas no te tatuarÃ­as nada?",
    "Â¿QuÃ© prefieres: oler mucho los pies de alguien siempre que os encontrÃ©is o no poder verlo?",
    "Â¿QuÃ© nunca perdonarÃ­as?",
    "Â¿Te queda solo un minuto de vida, quÃ© quieres decir?",
    "Si pudieras estar en la mente de alguien de este grupo, Â¿de quiÃ©n serÃ­a y por quÃ©?",
    "Â¿QuÃ© prefieres, ser infiel o que te pongan los cuernos?"
  ],
  "nivel3": [
    "Â¿Si nadie se enterara nunca, con quiÃ©n pasarÃ­as una noche de pasiÃ³n esta noche?",
    "Â¿QuiÃ©n te parece el/la mÃ¡s guapo/a del grupo?",
    "Â¿A quiÃ©n escogerÃ­as para hacer un trÃ­o?",
    "Â¿Con quÃ© parejas de amigos querrÃ­as ir a un club de intercambio de parejas?",
    "Â¿CuÃ¡l es tu zona erÃ³gena mÃ¡s sensible?",
    "Â¿CuÃ¡l es tu fantasÃ­a sexual?",
    "Â¿Postura sexual favorita?",
    "Â¿QuÃ© nota te darÃ­as en la cama?",
    "Â¿QuÃ© es lo que te suele gustar hacer despuÃ©s del sexo?",
    "Â¿De quÃ© te disfrazarÃ­as como fantasÃ­a sexual?",
    "Â¿TendrÃ­as una relaciÃ³n abierta?",
    "Â¿Si alguien te diera un millÃ³n de euros por romper con tu pareja, lo harÃ­as?",
    "Â¿Si alguien te diera un millÃ³n de euros por ser infiel a tu pareja, lo serÃ­as?",
    "Â¿Con cuÃ¡ntas personas te has acostado?",
    "Â¿A quiÃ©n llamarÃ­as para enterrar un cadÃ¡ver?",
    "Â¿Escoge a dos personas que quieras que se besen?",
    "Â¿QuÃ© prefieres: ser infiel o que te pongan los cuernos?",
    "Â¿A quiÃ©n salvarÃ­as primero de este grupo?"
  ]
}
RETOS = {
"nivel1": [
        "Canta una canciÃ³n frente a ",
        "Bebe por cada positivo que le dicen a ",
        "Imita a alguien del grupo, por cada fallo bebes adivina ",
        "Cuenta un chiste si se rÃ­e bebe, a  ",
        "Da 10 vueltas sobre ti mismo y luego ponte a correr en lÃ­nea recta cogido de la mano de ",
        "Haz una lucha de brazos con ",
        "Cuenta algo que nadie sepa. a ",
        "Cuenta tu experiencia mÃ¡s vergonzosa. a",
        "Haz una declaraciÃ³n de amor a ",
        "Dibuja un Â«tatuajeÂ» en la cara con un marcador al jugador a",
        "Bebe por cada vez que beba ",
        "Pasale 3 chupitos a "
    ],
    "nivel2": [
        "Bebe 2 chupitos o di algo negativo de ",
        "Hazle un masaje a ",
        "Baila la canciÃ³n que te ponga ",
        "Si te queda menos de la mitad de bateria bebe un chupito y le das tres a",
        "Dale un abrazo a ",
        "Gira una botella y besa a quien toque. gira la botella ",
        "Describe la relaciÃ³n con el tÃ­tulo de una canciÃ³n a ",
        "Cuenta lo que sientes por ",
        "Hasta que te vuelva a tocar no puedes hablar si hablas te dirÃ¡ lo que tiene que beber",
        "Imita un orgamos de ",
        "Cierra los ojos, ponte en medio de los jugadores y adivina quiÃ©nes son tocÃ¡ndoles la nariz. elige el jugador "
    ],
    "nivel3": [
        "Besa donde quieras a",
        "Cierra los ojos y deja que te bese donde quiera.",
        "Quedarse en ropa interior delante de todos durante una ronda.",
        "Haz un baile sexy a ",
        "Haz una imitaciÃ³n de",
        "Bebe un chupito de tequila de la parte del cuerpo de ",
        "Pasa la lengua por el cuello de ",
        "Lame la mejilla de",
        "Di la primera letra del nombre de tu ex por cada fallo bebes, adivina"
    ]
}
# InicializaciÃ³n del juego
def inicializacion_juego():
    """Inicializar las variables de sesiÃ³n"""
    if 'jugadores' not in st.session_state:
        st.session_state.jugadores = []
    if 'jugadores_actuales' not in st.session_state:
        st.session_state.jugadores_actuales = 0
    if 'juego_activo' not in st.session_state:
        st.session_state.juego_activo = False
    if 'categoria' not in st.session_state:
        st.session_state.categoria = None
    if 'jugador_actual' not in st.session_state:
        st.session_state.jugador_actual = None
    if 'pregunta_seleccionada' not in st.session_state:
        st.session_state.pregunta_seleccionada = None
    if 'reto_seleccionado' not in st.session_state:
        st.session_state.reto_seleccionado = None
    if 'puntuaciones' not in st.session_state:
        st.session_state.puntuaciones = {}
    if 'ocultar_mensaje' not in st.session_state:
        st.session_state.ocultar_mensaje = False

# Inicializar el juego
inicializacion_juego()

# ConfiguraciÃ³n del juego inicial
if not st.session_state.juego_activo:
    st.markdown("<h1 style='text-align: center;'>Juego de Preguntas y Retos</h1>", unsafe_allow_html=True)

    st.header("ConfiguraciÃ³n de los jugadores")
    col1, col2 = st.columns(2)

    with col1:
        numero_jugadores = st.number_input("Â¿CuÃ¡ntos jugadores?", min_value=2, step=1, value=2)
        categoria = st.selectbox("Elige tu nivel:", list(PREGUNTAS.keys()))
        jugar = st.button("Iniciar Juego")

    with col2:
        jugadores = []
        for i in range(numero_jugadores):
            nombre_jugador = st.text_input(f"Nombre del jugador {i + 1}:", key=f"jugador_{i}")
            if nombre_jugador:
                jugadores.append(nombre_jugador)

    if len(jugadores) == numero_jugadores and jugar:
        st.session_state.jugadores = jugadores
        st.session_state.categoria = categoria
        st.session_state.juego_activo = True
        st.session_state.jugador_actual = random.choice(jugadores)
        st.session_state.puntuaciones = {jugador: 0 for jugador in jugadores}
        st.rerun()

# Ronda de Juego
else:
    st.markdown("<h1 style='text-align: center;'>Ronda de Juego</h1>", unsafe_allow_html=True)
    
    # Selector de categorÃ­a en cualquier momento
    nueva_categoria = st.selectbox(
        "Selecciona una categorÃ­a:", list(PREGUNTAS.keys()), 
        index=list(PREGUNTAS.keys()).index(st.session_state.categoria)
    )
    if nueva_categoria != st.session_state.categoria:
        st.session_state.categoria = nueva_categoria
        st.session_state.pregunta_seleccionada = None
        st.session_state.reto_seleccionado = None
        st.session_state.ocultar_mensaje = False
        st.success(f"CategorÃ­a cambiada a: {nueva_categoria}")
        st.rerun()

    jugador_actual = st.session_state.jugador_actual

    # Mostrar Pregunta/Reto si no estÃ¡ oculto
    if not st.session_state.ocultar_mensaje:
        if not st.session_state.pregunta_seleccionada and not st.session_state.reto_seleccionado:
            if random.choice([True, False]):
                st.session_state.pregunta_seleccionada = random.choice(PREGUNTAS[st.session_state.categoria])
            else:
                st.session_state.reto_seleccionado = random.choice(RETOS[st.session_state.categoria])

        if st.session_state.pregunta_seleccionada:
            st.markdown(f"<h2 style='text-align: center;'>{jugador_actual}, {st.session_state.pregunta_seleccionada}</h2>", unsafe_allow_html=True)
        elif st.session_state.reto_seleccionado:
            otro_jugador = random.choice([j for j in st.session_state.jugadores if j != jugador_actual])
            st.markdown(f"<h2 style='text-align: center;'>{jugador_actual}, {st.session_state.reto_seleccionado} {otro_jugador}</h2>", unsafe_allow_html=True)

    # BotÃ³n para la siguiente ronda
    if st.button("Siguiente ronda"):
        st.session_state.jugadores_actuales = (st.session_state.jugadores_actuales + 1) % len(st.session_state.jugadores)
        st.session_state.jugador_actual = st.session_state.jugadores[st.session_state.jugadores_actuales]
        st.session_state.pregunta_seleccionada = None
        st.session_state.reto_seleccionado = None
        st.session_state.ocultar_mensaje = False
        st.rerun()

    # Mostrar puntuaciones actuales en dos columnas
    st.header("Puntuaciones")
    col1, col2 = st.columns(2)

    with col1:
        # Campos number_input para modificar puntos
        for jugador in st.session_state.jugadores:
            puntos = st.number_input(
                f"{jugador}:",
                min_value=-50,
                max_value=50,
                step=1,
                value=st.session_state.puntuaciones[jugador],
                key=f"puntos_{jugador}"
            )
            if puntos != st.session_state.puntuaciones[jugador]:
                st.session_state.puntuaciones[jugador] = puntos
                st.session_state.ocultar_mensaje = True
                st.rerun()

    with col2:
        # GrÃ¡fica de puntuaciones
        if st.session_state.puntuaciones:
            df_puntos = pd.DataFrame({
                "Jugador": list(st.session_state.puntuaciones.keys()),
                "PuntuaciÃ³n": list(st.session_state.puntuaciones.values())
            })
            
            # Crear grÃ¡fico de barras con Altair
            chart = alt.Chart(df_puntos).mark_bar().encode(
                y=alt.X("Jugador:N", title="Jugador", sort=None),
                x=alt.Y("PuntuaciÃ³n:Q", title="PuntuaciÃ³n"),
                color=alt.Color("Jugador:N", legend=None)
            ).properties(
                width=300,
                height=400
            )
            st.altair_chart(chart, use_container_width=True)

    # BotÃ³n para salir del juego
    if st.button("Salir del Juego"):
        st.session_state.juego_activo = False
        st.session_state.jugadores = []
        st.session_state.categoria = None
        st.session_state.puntuaciones = {}
        st.write("Gracias por jugar. Â¡Hasta la prÃ³xima!")
